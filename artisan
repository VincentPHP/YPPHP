#!/usr/bin/env php
<?php
/**
 * User: yongli
 * Date: 17/4/19
 * Time: 17:57
 * Email: yong.li@szypwl.com
 * Copyright: 深圳优品未来科技有限公司
 */
/**
 * YP框架的系统工具包,注意此工具包需要 Symfony2/Console、Doctrine2支持
 *
 */
// 拒绝运行时调用php-cgi
if (substr(php_sapi_name(), 0, 3) == 'cgi') {
    die('运行php-cgi时不支持CLI工具。它需要php-cli函数！' . "\n\n");
}

// 设定时区
date_default_timezone_set('PRC');

// 定义环境常量
define('ENVIRONMENT', isset($_SERVER['YP_ENV']) ? $_SERVER['YP_ENV'] : 'prod');

// 定义根目录
define('ROOT_PATH', __DIR__ . DIRECTORY_SEPARATOR);

// 定义应用路径
define('APP_PATH', rtrim(ROOT_PATH . 'app', '/') . DIRECTORY_SEPARATOR);

// 定义框架路径
defined('SYSTEM_PATH') ? : define('SYSTEM_PATH', rtrim(ROOT_PATH . 'system', '/') . DIRECTORY_SEPARATOR);

// 加载 Illuminate\Console Doctrine Eloquent
require ROOT_PATH . 'vendor/autoload.php';

// 注册 Doctrine2 类库自动加载
function do_doctrine_load($className)
{
    $path = APP_PATH . 'ThirdParty/Doctrine/Entity/' . $className . '.php';
    if (file_exists($path)) {
        require $path;
    }else{
        // 加载配置文件
        $className = str_replace('\\', '/', $className);
        $path = APP_PATH  . $className . '.php';
        if (file_exists($path)) {
            require $path;
        }
    }
}

spl_autoload_register('do_doctrine_load');

// 加载 YP 命令行工具rm 
//require APP_PATH . 'Cli/autoload.php';
/**
 * 所要加载的类
 *
 * @param $class
 */
function do_yp_load($class)
{
    if ($class) {
        $file           = str_replace('\\', '/', $class);
        $file = APP_PATH . $file . '.php';
        if (file_exists($file)) {
            require $file;
        }
    }

}

spl_autoload_register('do_yp_load');

//加载 Doctrine 以及 Doctrine 的 DB连接
require APP_PATH . 'ThirdParty/Doctrine/Doctrine.php';

$doctrine  = new Doctrine();
$helperSet = new \Symfony\Component\Console\Helper\HelperSet(
    [
        'db' => new \Doctrine\DBAL\Tools\Console\Helper\ConnectionHelper($doctrine->em->getConnection()),
        'em' => new \Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper($doctrine->em),
    ]
);

// 加载命令行工具
$app = new \Symfony\Component\Console\Application('YP框架命令行工具', 'v1.0(stable)');
$app->setCatchExceptions(true);
$app->setHelperSet($helperSet);

// 开始注册所需命令
$artisans = [
    // Doctrine 命令
    new \Cli\Console\Doctrine\ConvertMappingCommand(),
    new \Cli\Console\Doctrine\GenerateEntitiesCommand(),
    new \Cli\Console\Doctrine\UpdateCommand(),
    // Thrift 命令
    new \Cli\Console\Thrift\CreateCommand(),
    new \Cli\Console\Thrift\GenCommand(),
    new \Cli\Console\Thrift\WorkCommand(),
    // migrations 命令
//    new \YP\Console\Database\CreateCommand(),
//    new \YP\Console\Database\MigrateCommand(),
//    new \YP\Console\Database\MigrateMakeCommand(),
//    new \YP\Console\Database\RefreshCommand(),
//    new \YP\Console\Database\ResetCommand(),
//    new \YP\Console\Database\RollbackCommand(),
//    new \YP\Console\Database\StatusCommand(),
];
$app->addCommands($artisans);
$app->run();